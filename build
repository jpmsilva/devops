#!/bin/bash

error_handler () {
    errcode=$?
    echo "Got error code $errorcode"
    echo "Last command executed was"
    echo -e "\t$BASH_COMMAND"
    echo "on line ${BASH_LINENO[0]}"
    exit $errcode
}
trap error_handler ERR

PROJECTS_ZIP="/tmp/package.zip"

SCRIPT=$(readlink -f $0)
SCRIPTPATH=$(dirname $SCRIPT)

WORKING=$(mktemp -d)

echo "Working on ${WORKING}"

trap "rm -rf ${WORKING}" EXIT

PROJECT_HOME="${WORKING}/project"
mkdir "${PROJECT_HOME}"

unzip "${PROJECTS_ZIP}" -d "${PROJECT_HOME}"

#5.1
(cd "${PROJECT_HOME}/java/lib-example" && mvn org.codehaus.mojo:versions-maven-plugin:2.5:set -DremoveSnapshot -DgenerateBackupPoms=false)
(cd "${PROJECT_HOME}/java/lib-example" && mvn clean install)

#5.2
(cd "${PROJECT_HOME}/java/app-example" && mvn org.codehaus.mojo:versions-maven-plugin:2.5:use-latest-versions -Dincludes='com.wwa.*:*' -DgenerateBackupPoms=false)
(cd "${PROJECT_HOME}/java/app-example" && mvn org.codehaus.mojo:versions-maven-plugin:2.5:set -DremoveSnapshot -DgenerateBackupPoms=false)
(cd "${PROJECT_HOME}/java/app-example" && mvn clean package)
JAVA_APP_VERSION=$(cd "${PROJECT_HOME}/java/app-example" && mvn -q -Dexec.executable="echo" -Dexec.args='${project.version}' --non-recursive org.codehaus.mojo:exec-maven-plugin:1.3.1:exec)
(cd "${PROJECT_HOME}/java/app-example" && java -jar "target/app-example-${JAVA_APP_VERSION}.jar")

#5.3
(cd "${PROJECT_HOME}/python/wwa_app_example" && find wwa_app_example -iname "*.py" -exec pylint {} \;)
#tests fail, so we unset the trap
trap - ERR
(cd "${PROJECT_HOME}/python/wwa_app_example" && python3 -m unittest discover -v -s tests -p \*.py)
#now set the trap back
trap error_handler ERR
(cd "${PROJECT_HOME}/python/wwa_app_example" && python3 -m setup sdist)
(cd "${PROJECT_HOME}/python/wwa_app_example" && python3 -m setup bdist_wheel)
(cd "${PROJECT_HOME}/python/wwa_app_example" && python3 -m virtualenv -p python3 env && source env/bin/activate && python3 -m setup install && wwa_devops && deactivate)
PYTHON_APP_VERSION=$(cd "${PROJECT_HOME}/python/wwa_app_example" && cat version.txt)

rm -rf "${SCRIPTPATH}"/output-ubuntu-16.04-amd64-virtualbox-iso

(cd "${SCRIPTPATH}" && packer build \
  -only=virtualbox-iso \
  -var disk_size=8000 \
  -var iso_url="${SCRIPTPATH}/ubuntu-16.04.3-server-amd64.iso" \
  -var java="${PROJECT_HOME}/java/app-example/target/app-example-${JAVA_APP_VERSION}.jar" \
  -var python="${PROJECT_HOME}/python/wwa_app_example/dist/wwa_app_example-${PYTHON_APP_VERSION}-py3-none-any.whl" \
  ubuntu-16.04-amd64.json)

